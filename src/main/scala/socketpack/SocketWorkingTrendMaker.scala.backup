package socketpack
import producerpack._

import java.net._
import java.io._
import java.util.Random

import scala.collection.mutable.Stack
import scala.collection.mutable.ListBuffer
import contextpack.MainContext


class SocketTrendThread(data:Vector[String]) extends Runnable{
  //this class is going to be used to make the threads to send data to the producer.
  //this is going to have a few functions.
  val dat = data


  var serverSocket = new ServerSocket(6666)
  // this .accept() method is key
  var clientSocket = serverSocket.accept()
  var out = new PrintWriter(clientSocket.getOutputStream(), true)
  var in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()))


  // def sendOverSocket(data: String) = {
  //   out.println(data)
  // }
  
  override def run(): Unit = {
    // dat.foreach(p => println(p))
    dat.foreach(p => {
      out.println(p)
      println(p)
      // MainSocketClient.sendOverSocket(p)
      // println(p)
      // // outC.println(p); 
      // // outS.println(p); 
      // var randomnum = new Random()
      // var randomnumstring = randomnum.toString()
      // println("looping... " + randomnumstring)
      // Thread.sleep(300)
    })

  }
}
